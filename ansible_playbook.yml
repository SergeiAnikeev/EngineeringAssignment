---
 - name: provisioning EC2 instances using Ansible
   hosts: localhost
   connection: local
   gather_facts: False
   tags: provisioning

   vars:
     # VPC
     vpc_name: "Ansible VPC"
     vpc_cidr: 10.10.0.0/24
     # Subnet
     subnet_name: "Ansible Subnet"
     subnet_cidr: 10.10.0.0/26
     # Internet Gateway Name
     igw_name: "Traffic IGW"
     route_name: "Route"
     securitygroup_name: "Ansible Security Group"
     keypair: Ansible
     instance_type: t2.micro
     image: ami-0bf8b986de7e3c7ce
     wait: yes
     group: webserver
     count: 1
     hostpath: "/etc/ansible/hosts"


   tasks:

     - name: Task 1 - Creating VPC
       ec2_vpc_net:
         name: "{{ vpc_name }}"
         cidr_block: "{{ vpc_cidr }}"
         region: "{{ region }}"
         state: present
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
       register: vpc

     - name: Task 2 - Associate subnet to the VPC
       ec2_vpc_subnet:
         state: present
         vpc_id: "{{ vpc.vpc.id }}"
         region: "{{ region }}"
         cidr: "{{ subnet_cidr }}"
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         map_public: yes
         resource_tags:
           Name: "{{ subnet_name }}"
       register: subnet

     - name: Task 3 - Creating IGW
       ec2_vpc_igw:
         vpc_id: "{{ vpc.vpc.id }}"
         region: "{{ region }}"
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         state: "present"
         tags:
           Name: "{{ igw_name }}"
       register: igw

     - name: Task 4 - Route IGW
       ec2_vpc_route_table:
         vpc_id: "{{ vpc.vpc.id }}"
         region: "{{ region }}"
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         subnets:
           - "{{ subnet.subnet.id }}"
         routes:
           - dest: 0.0.0.0/0
             gateway_id: "{{ igw.gateway_id  }}"
         tags:
           Name: "{{ route_name }}"

     - name: Task 5 - Creating Security Group
       ec2_group:
         name: "Web DMZ"
         description: "DMZ Security Group"
         vpc_id: "{{ vpc.vpc.id }}"
         region: "{{ region }}"
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         rules:
           - proto: tcp
             ports:
             - 80
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             ports:
             - 22
             cidr_ip: 0.0.0.0/0
       register: security_group

     - name: Task 6 - Launching the new EC2 Instance
       ec2:
         image: ami-0bf8b986de7e3c7ce
         wait: yes
         instance_type: t2.micro
         region: "{{ region }}"
         group_id: "{{ security_group.group_id }}"
         vpc_subnet_id: "{{ subnet.subnet.id }}"
         keypair: "{{ keypair }}"
         instance_tags:
           Name: webserver
         count_tag:
           Name: webserver
         exact_count: 1
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
       register: ec2

     - name: Task 7 - Adding the newly created EC2 instance to host group
       lineinfile: dest={{ hostpath }}
                   regexp={{ item.public_ip }}
                   insertafter="[webserver]"
                   line="{{ item.public_ip }}"
                   state=present
       with_items: "{{ec2.instances}}"

     - wait_for: path={{ hostpath }}

     - name: Task 8 - Waiting for SSH to come up
       local_action: wait_for
                     host={{ item.public_ip }}
                     port=22
                     state=started
       with_items: "{{ec2.instances}}"

     - name: Task 9 - Adding tag to Instance
       local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
       with_items: "{{ ec2.instances }}"
       args:
         tags:
           Name: webserver

     - name: Task 10 - SSH to the EC2 Instance
       add_host: hostname={{ item.public_ip }} groupname=webserver
       with_items: "{{ ec2.instances }}"

 - name: Installing Docker CE and Nginx container
   hosts: webserver
   become: true
   remote_user: ubuntu
   gather_facts: True

   tasks:
     - name: ensure repository key is installed
       apt_key:
         url: https://download.docker.com/linux/ubuntu/gpg
         state: present

     - name: ensure docker registry is available
       apt_repository: repo='deb https://download.docker.com/linux/ubuntu bionic stable' state=present

     - name: ensure docker and dependencies are installed
       apt: name=docker-ce update_cache=yes

     - service: name=docker state=restarted
     - apt:
         update_cache: yes
         state: latest
         name: python3-pip
     - pip:
         name: docker

     - name: deploying nginx docker container
       docker_container:
         image: nginx:latest
         name: nginx
         state: started
         healthcheck:
           test: ["CMD", "curl", "--fail", "http://localhost"]
           interval: 10s
           timeout: 10s
           retries: 3
           start_period: 30s
         auto_remove: true
         ports:
           - "80:80"
